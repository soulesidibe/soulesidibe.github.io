<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Soulesidibe</title>
 <link href="http://soulesidibe.github.com/atom.xml" rel="self"/>
 <link href="http://soulesidibe.github.com/"/>
 <updated>2014-03-30T16:52:05+00:00</updated>
 <id>http://soulesidibe.github.com</id>
 <author>
   <name>Souleymane Sidibe</name>
   <email></email>
 </author>

 
 <entry>
   <title>L’injection de dépendances:roboguice</title>
   <link href="http://soulesidibe.github.com/2013/11/10/Linjection-de-dependances-roboguice/"/>
   <updated>2013-11-10T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2013/11/10/Linjection-de-dependances-roboguice</id>
   <content type="html">&lt;p&gt;Je ne vais pas vous faire un cours sur l’injection de dépendances en java. Il y a de très bons livres 
et de bonnes ressources sur le net. 
Mais ce que je peux vous dire en gros, l’injection de dépendances va nous permettre de manager nos objects, 
nos classes en vu d’un code plus claire et maintenable. 
Pour vous donner un exemple de ce qu’on peut faire avec, on a l’habitude de faire ceci pour instancier 
une view: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Avec de l’injection de dépendances on aura qu’à faire ceci: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pas mal non? :D 
Donc comme je l’ai dit ça va grandement simplifier notre code java.&lt;/p&gt;

&lt;h2&gt;Comment faire de l’injection de dépendances&lt;/h2&gt;

&lt;p&gt;Comme d’habitude dans le monde java, il existe un bon paquet de librairies open source pour nous 
simplifier la vie. On aura pas besoin d’implémenter nous même notre système d’injection de 
dépendances. On peut qu’en même retenir les types d’injections de dépendances qui existent:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;l’injection par constructeur &lt;/li&gt;
&lt;li&gt;l’injection par interface &lt;/li&gt;
&lt;li&gt;l’injection par mutateur &lt;/li&gt;
&lt;li&gt;l’injection par champ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour plus de détails je vous renvoie vers &lt;a href=&quot;http://www-igm.univ-mlv.fr/%7Edr/XPOSE2010/guicespring/di_presentation.html&quot;&gt;ce lien&lt;/a&gt; qui explique assez clairement les choses… &lt;/p&gt;

&lt;h2&gt;Roboguice&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;RoboGuice is a framework that brings the simplicity and ease of Dependency Injection to Android, using Google’s own Guice library. If you’ve ever used Spring (the #1 enterprise framework on Java, now more popular than J2EE itself) or Guice, you already know how convenient this style of programming can be.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Définition tirée du wiki du framework. 
En résumé(ou pour traduire), roboguice permet d’adapter le framework d’injection de dépendances 
&lt;strong&gt;Google Guice&lt;/strong&gt; au monde android tout en y ajoutant des subtilités dues au cycle de vie particulier 
d’une application android.
Voici une liste non exhaustive des fonctionnalités de roboguice: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;L’injection de view (@InjectView)&lt;/li&gt;
&lt;li&gt;l’injection de ressources(@InjectResource)&lt;/li&gt;
&lt;li&gt;l’injection de service(par exemple pour NotificationManager, on aura @Inject NoificationManager notifManager;)&lt;/li&gt;
&lt;li&gt;l’injection de pojo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;et bien d’autres bonnes choses…&lt;/p&gt;

&lt;h2&gt;Comment ça marche&lt;/h2&gt;

&lt;p&gt;Je vais vous montrer quelques fonctionnalités de roboguice. Le code est disponible sur github(see below…)
On commence par se faire un petit projet dans android studio(regarde ceci si tu n’utilise pas encore l’IDE).
Je suppose que vous êtes prêt  donc allons-y! &lt;/p&gt;

&lt;p&gt;NB: &lt;em&gt;Le projet que j’utilise a pour min SDK API 14 et pour target API 19 raison pour laquelle je n’ai pas pu injecter de view dans des fragments. Roboguice ne supportant pour le moment que la class Fragment du support V4.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Ajout de la dépendances dans le fichier build.gradle: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.roboguice:roboguice:2.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dans votre activity, vous devez hériter de RoboActivity à la place de Activity. Jettez un coup d’oeil 
dans le package &lt;strong&gt;roboguice.activity&lt;/strong&gt; pour voir un peu les types d’activity disponibles.&lt;/p&gt;

&lt;p&gt;Voici à quoi ressemble mon fichier layout. C’est un simple écran de connexion avec deux EditText 
et un Button de connexion: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;RelativeLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:tools=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://schemas.android.com/tools&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tools:context=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.MainActivity&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;EditText&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@+id/edt_name&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:singleLine=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:hint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@string/str_login_name&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_centerVertical=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_alignParentRight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_alignParentLeft=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;EditText&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:singleLine=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@+id/edt_passwd&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:inputType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;textPassword&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:hint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@string/str_login_name&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;30dp&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_below=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@+id/edt_name&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_alignParentLeft=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_alignParentRight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@+id/btn_connect&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@string/str_button_signin&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_alignParentBottom=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_alignParentRight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_alignParentLeft=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ma class MainActivity.java: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoboActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;edt_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;edt_passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@InjectView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;btn_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@InjectResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;str_welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

         &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;That’s it! C’est super simple à utiliser. Il ne faut juste pas oublier qu’on utilise &lt;strong&gt;RoboActivity&lt;/strong&gt; 
à la place de Activity! Sinon, on se retouve avec des java.lang.NullPointerException!
Regardons un peu notre méthode onCreate(). Elle s’est grandement simplifiée. Et il faut reconnaitre 
que ce code ci-dessus est plus facile à lire et à maintenir que si on devait faire ceci: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;edt_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;passwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;edt_passwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;btn_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;str_welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnClickListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Vous êtes convaincus? Non? Bon voici quelques exemples d’applications utilisant Roboguice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook Messenger&lt;/li&gt;
&lt;li&gt;Pulse&lt;/li&gt;
&lt;li&gt;Swiftkey&lt;/li&gt;
&lt;li&gt;Google Docs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pas mal non?
Bon la librairie n’est pas parfaite non plus. Ce que je n’ai pas aimé:&lt;/p&gt;

&lt;p&gt;Si on utilise des fragments et qu’on a comme minSDKVersion 14, on ne peut tout simplement pas faire d’injections dans un fragment. La raison est que la classe RoboFragment, fournie, utilise android.support.v4.app.Fragment.
Le non support de l’ActionBarCompat
Heureusement que ces soucis seront corrigés dans les prochaines release! &lt;/p&gt;

&lt;h2&gt;Alternative à Roboguice&lt;/h2&gt;

&lt;p&gt;Il existe d’autres solutions pour faire de l’injection de dépendances. Je vais en citer deux!&lt;/p&gt;

&lt;h3&gt;Dagger&lt;/h3&gt;

&lt;p&gt;C’est une solution issue des labos de la célébre startup square. Elle permet d&amp;#39;injecter tout ce que l&amp;#39;on veut
dans notre application. Pas uniquement des vues.
Pour plus d’informations &lt;a href=&quot;http://square.github.io/dagger/&quot;&gt;le site officiel&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;AndroidAnnotation&lt;/h3&gt;

&lt;p&gt;Je pourrai écrire un post sur ce framework tellement il y a des choses à dire. Déjà le but de cette 
librairie d’après les concepteurs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We want to facilitate the writing and the maintenance of Android applications.
 We believe that simple code with clear intents is the best way to achieve those goals. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pour atteindre leurs objectifs, on n’y trouve évidemment de l’injection de dépendances. Avec de simples annotations, 
on peut faire des appels &lt;strong&gt;REST&lt;/strong&gt;, exécuter du code en background, mettre en place des listeners avec &lt;em&gt;@Click&lt;/em&gt;, etc. 
Autre point fort, il supporte RoboGuice :). 
Un truc sympa avec android annotation, supposons qu’on ait une vue avec comme id, &lt;em&gt;@+id/signin&lt;/em&gt;. Pour la récupérer dans le code il suffit de faire:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@ViewById&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pas besoin de lui spécifier l’id comme avec Roboguice. Il fera le mapping avec R.id.signin tout seul :).&lt;/p&gt;

&lt;p&gt;Voila voila!
Si vous avez ce souci de vouloir toujours un code plus propre et maintenable, je vous conseille vivement 
de revoir Roboguice ou plus généralement l’injection de dépendances.
Le petit exemple de prise en main est dispo sur &lt;a href=&quot;https://github.com/soulesidibe/roboguicesample&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nexus 5, Android kitkat et Android Studio 0.3.2</title>
   <link href="http://soulesidibe.github.com/2013/11/01/Nexus-5-Android-kitkat-et-Android-Studio-0-3-2/"/>
   <updated>2013-11-01T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2013/11/01/Nexus-5-Android-kitkat-et-Android-Studio-0-3-2</id>
   <content type="html">&lt;p&gt;Hier on a eu droit à un bon paquet de nouveautés dans le monde merveilleux d’android.
Je vais essayer de revoir ce qui s’est passé :). &lt;/p&gt;

&lt;h2&gt;Nexus 5&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/11/lg-nexus-5-photo.png&quot; alt=&quot;nexus5&quot;&gt;&lt;/p&gt;

&lt;p&gt;Enfin! 
Depuis un bon moment on nous parle de ce nouveau nexus sur les sites spécialisés. Il est là! Et il est beau! 
La première chose qui frappe c’est la taille de la bête; un écran de 5 pouces(4.95&amp;quot; en réalité) full HD équipé 
de la dernière version d’android(on en parle en bas). 
Point important, il est 4G! Comme tous les smartphones récemment sortis. Pour plus de détails c’est ici ==&amp;gt; &lt;a href=&quot;http://www.google.fr/nexus/5/&quot;&gt;Page officielle&lt;/a&gt;. 
Ayant un &lt;strong&gt;#nexus4&lt;/strong&gt;, quand je revois les spécifications techniques du &lt;strong&gt;#nexus5&lt;/strong&gt;, je me dis que c’est juste 
une mise à jour du matériel avec un meilleur capteur photo, la 4G et un sublime écran. 
Perso avoir un smartphone de 5 pouces ne me tente pas vraiment même si je pense que c’est la taille maximal pour un tel. 
Si vous êtes un nexus fan boy et que vous avez un nexus 4(et qu’il est en bonne état), vous pouvez vous passer du nexus 5. 
Surtout que vous recevrez bientôt la mise à jour KitKat… &lt;/p&gt;

&lt;h2&gt;Android KiKat 4.4&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/11/android-kitkat.jpg&quot; alt=&quot;kitkat&quot;&gt;&lt;/p&gt;

&lt;p&gt;Celui la on la vraiment attendu et il n’a pas déçu! Cette version android est annoncée comme celle qui 
va permettre de réduire encore plus la fragmentation du système Android. En effet, d’après les dires de 
&lt;a href=&quot;https://plus.google.com/+SundarPichai&quot;&gt;Sundar Pichai&lt;/a&gt;, Kitkat pourra tourner sur beaucoup plus de smartphones android et non que sur les derniers. 
Il suffira d’un device avec au moins &lt;strong&gt;512Mo&lt;/strong&gt; de Ram. Ce qui va permettre de reduire encore plus vite la 
part de &lt;a href=&quot;http://goo.gl/BvZRw&quot;&gt;Gingerbread&lt;/a&gt; pour le plus grand bonheur de nous les dév android mais aussi des possesseurs de tel 
sous 2.3.x (rendez vous en mi 2014 pour déclarer la mort de Froyo, Gingerbread et HoneyComb :D ). &lt;/p&gt;

&lt;p&gt;Côté apps, la plupart des apps de &lt;strong&gt;#google&lt;/strong&gt; vont recevoir des maj. Les plus attendus sont: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hangout: Avec l’intégration des sms(l’ancienne app sms disparaît), le partage de position et d’autres nouvelles fonctionnalités. Si vous êtes pressés l’app est déjà dispo sur le net ==&amp;gt; &lt;a href=&quot;http://goo.gl/uuKh2U&quot;&gt;ICI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google Home: La home reçoit aussi une maj (je vais devoir désactiver &lt;a href=&quot;http://goo.gl/ApNyPM&quot;&gt;aviate&lt;/a&gt; :-( ) avec une nouvelle façon D’accéder à Google Now&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et bien d’autres nouveautés que vous retrouverez assez facilement sur le net…&lt;/p&gt;

&lt;h2&gt;Android Studio 0.3.2&lt;/h2&gt;

&lt;p&gt;L’IDE pour faire des applications android est passé hier après-midi à la version 0.3.2 avec des fonctionnalités super sympa!&lt;/p&gt;

&lt;h4&gt;Screenrecording&lt;/h4&gt;

&lt;p&gt;Quand on publie une app sur le play store, il faut montrer des screenshots qui exposent les fonctionnalités 
importantes de l’app. Encore mieux une vidéo de démo permet de voir comment l’app doit être utilisé. 
Cette vidéo peut donner envie ou pas d’installer l’app. Faire des vidéos de qualité n’était pas chose simple 
sur android. Mais ca c’était avant! le SDK android inclut un outil qui permet de faire des vidéos de démo à partir de notre tel et avec du MP4 comme ouput. C’est vraiment super! 
NB: &lt;em&gt;Il faut etre sous &lt;strong&gt;kitkat&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Java 7&lt;/h4&gt;

&lt;p&gt;Android supporte maintenant java 7! Un dév android c’est avant tout un dév java! et plus tu es bon en java plus tu l’es en dév android! Donc avec java 7 (je rentrerai pas dans les details) on peut par exemple faire un switch case avec des strings! Du multi catch:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/11/multicatch1.png&quot; alt=&quot;Multi catch&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/11/multicatch2.png&quot; alt=&quot;Multi catch&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Gradle integration&lt;/h4&gt;

&lt;p&gt;Si vous l’utilisez déjà comme IDE principal(je ne me rappelle même plus la dernière fois que j’ai ouvert eclipse…), 
vous vous êtes rendu compte de la lenteur quand on fait un build! Une petite astuce permet d’améliorer ca en 
utilisant le mode daemon de gradle. Maintenant avec studio une simple case à cocher permet de gagner en temps lors de vos builds! &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/11/faster-builds.png&quot; alt=&quot;daemon gradle&quot;&gt; &lt;/p&gt;

&lt;p&gt;Voila voila en gros ce qui c’est passé hier! J’ai juste survolé mais je reviendrais sur les nombreuses nouveautés de l’API 19!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gradle Please!</title>
   <link href="http://soulesidibe.github.com/2013/10/15/gradle-please/"/>
   <updated>2013-10-15T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2013/10/15/gradle-please</id>
   <content type="html">&lt;p&gt;Depuis son annonce au Google IO 2013, &lt;strong&gt;Android Studio&lt;/strong&gt; est devenu mon IDE number 1! 
Je l’utilise au quotidien et tous mes projets eclipse ont migré. J’explique dans &lt;a href=&quot;http://soulesidibe.github.io&quot;&gt;ce billet&lt;/a&gt; comment faire la migration. 
L’utilisation de gradle comment système de build rend un projet android beaucoup plus simple à maintenir surtout en ce qui concerne la gestion des dépendances. 
Plus besoin d’importer des librairies à en plus finir! Un exemple d’ajout de dépendance: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;com.crashlytics.android:crashlytics:1.+&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Donc comme on le voit pour utiliser crashlytics c’est speed. Gradle se chargera de récupérer les fichiers qu’il faut et de les mettre dans le build path.&lt;/p&gt;

&lt;p&gt;Maintenant, la plus part des projets open source qu’on utilise dans nos projets n’offrent pas cette possibilité(non disponibilité du aar). Donc voici un peu ce qu’on peut faire: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Demander au développeur de rendre son projet compatible avec gradle(sur github on peut facilement dialoguer avec le dév. En anglais),&lt;/li&gt;
&lt;li&gt;Si on ne peut pas patienter, on peut toujours récupérer le projet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git clone chemin/vers/project.git project&lt;/code&gt;, ajouter en tant que module dans le projet puis rajouter 
cette ligne dans build.gradle &lt;code&gt;compile project(&amp;#39;:project&amp;#39;)&lt;/code&gt; et dans settings.gradle &lt;code&gt;include &amp;#39;:project&amp;#39;&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Un site recense l’ensemble des projets open source qui ont été &lt;strong&gt;&amp;quot;gradlisé&amp;quot;&lt;/strong&gt;. C’est &lt;a href=&quot;http://gradleplease.appspot.com/&quot;&gt;gradle please&lt;/a&gt;! :D&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>De eclipse à android Studio</title>
   <link href="http://soulesidibe.github.com/2013/08/11/de-eclipse-a-android-studio/"/>
   <updated>2013-08-11T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2013/08/11/de-eclipse-a-android-studio</id>
   <content type="html">&lt;p&gt;Comme vous le savez tous, lors du google IO 2013, il y a eu beaucoup de nouvelles concernant les développeurs android. 
Je ne vais pas toutes les lister ici mais juste celle qui nous intéressent pour l’article du jour. 
La team android nous a donc annoncé Android Studio! La nouvelle bête pour nos dévs en remplacement de l’IDE éclipse. &lt;/p&gt;

&lt;p&gt;Vous me direz ouff enfin un IDE dédié au développement android! Yes ils se sont enfin décidé. 
La seconde grosse annonce fut le remplacement du système de build ant par gradle. 
&lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Goals-of-the-new-Build-System&quot;&gt;&lt;strong&gt;ICI&lt;/strong&gt;&lt;/a&gt; les raisons pour lesquelles la team android l’a choisi. &lt;/p&gt;

&lt;p&gt;Ok mais le souci est que tous nos projets actuels sont sous eclipse. Maintenant comment faire migrer ces projets 
la vers SA et gradle? Google nous a fourni une démarche à suivre sur le site officiel. Pour un projet simple ca peut passer. Mais quand on a des projets librairies par ici ou des jars à en plus finir, ca devient un vrai casse-tête pour arriver à cette image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/08/capture-du-2013-08-11-140412.png&quot; alt=&quot;Android Studio&quot;&gt;&lt;/p&gt;

&lt;p&gt;Mais bon on est la pour atteindre cette objectif :-). 
Il nous faut, avant de commencer, un projet concret où on retrouvera quelques librairies(sous forme de project library 
ou de jar). Pour vous faire gagner du temps en voici un petit projet héberger sur &lt;a href=&quot;https://github.com/soulesidibe/KillApp&quot;&gt;githtub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Donc, on y trouve un projet utilisant les librairies ActionBarSherlock, PullToRefresh et deux jars l’un le support-v4 
et une petite lib permettant d’utiliser l’api de bitly. Il vous suffit maintenant de cloner le projet et de redemarrer votre eclipse en prenant pour workspace le dossier créé lors du clone et enfin commencer :-). &lt;/p&gt;

&lt;h2&gt;Mettre à jour ADT&lt;/h2&gt;

&lt;p&gt;Pour faire la migration nous avons besoin d’un outil proposé par la dernière version du plugin ADT et permettant 
de générer les fichiers utilisés par gradle pour construire notre projet. 
D’où la nécessité de mettre à jour le plugin mais aussi votre sdk pour bénéficier des derniers &amp;quot;tools&amp;quot;.&lt;/p&gt;

&lt;h2&gt;gradle.build, settings.gradle&lt;/h2&gt;

&lt;p&gt;Il est temps maintenant d’exporter notre projet! La procédure est très simple! File -&amp;gt; Export et on a cette fenêtre qui s’affiche: &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/08/capture-du-2013-08-11-151318.png&quot; alt=&quot;Eclipse adt&quot;&gt;&lt;/p&gt;

&lt;p&gt;Donc on choisit &amp;quot;Generate gradle build files&amp;quot;: &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/08/capture-du-2013-08-11-151541.png&quot; alt=&quot;Eclipse adt&quot;&gt;&lt;/p&gt;

&lt;p&gt;La il suffit de sélectionner le projet et non les dépendances du projet. Ici KillerApp. 
Le reste c’est du suivant suivant… A ce stade, eclipse nous a généré tous les fichiers qu’il faut. 
Quelques explications s’imposent. 
Nous avons l’apparition de quelques fichiers à la racine de notre projet mais aussi dans les répertoires de chaque module.  Oops! je ne vous ai pas dit! Avec AS ou IntellIJ, le workspace de Eclipse devient un projet, le projet de Eclipse devient un module. &lt;a href=&quot;http://confluence.jetbrains.com/display/IntelliJIDEA/FAQ+on+Migrating+to+IntelliJ+IDEA&quot;&gt;Plus de détails ici&lt;/a&gt;. Que représentent ces fichiers?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/08/capture-du-2013-08-11-152554.png&quot; alt=&quot;terminator&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gradle/: ce répertoire est une &amp;quot;installation locale&amp;quot; de l’outil gradle. on a donc pas besoin de l’installer sur notre pc. C’est la pratique qui est conseillé pour etre sure d’avoir tout le temps la bonne version de gradle pour builder nos projets&lt;/li&gt;
&lt;li&gt;gradlew, gradlew.bat: c’est le script qui nous permet de lancer les builds sur notre projet en ligne de commande au lieu de passer par Android Studio. Par exemple, pour générer un apk on peut lancer la commande ./gradlew clean assemble&lt;/li&gt;
&lt;li&gt;build.gradle et settings.gradle sont les deux fichiers où on passera le plus de temps pour configurer nos projets et leurs dépendances. Ce sont les fichiers de configurations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Android Studio&lt;/h2&gt;

&lt;p&gt;On peut maintenant importer notre projet sur AS en choisissant le fichier build.gradle situé à la racine du projet. 
Apres quelques temps(lecture des fichiers de conf, résolution des dépendances, etc), nous avons enfin AS qui se lance avec notre projet KillerApp ouvert! Et si on essayait de lancer l’app pour voir un peu?&lt;/p&gt;

&lt;p&gt;Bon évidemment ça ne passe pas. Gradle nous signifie qu’il y a des erreurs un peu partout et quand on regarde de plus prêt, nos librairies en sont pour quelque chose… &lt;/p&gt;

&lt;p&gt;Commençons par regarder le contenu des fichier build.gradle et settings.gradle de la racine.
settings.gradle: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:pull_to_refresh&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:ABS&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:KillerApp&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Donc on comprends que c’est dans ce fichier qu’on déclare les modules à inclure dans le build.
Le build lui même est configuré dans le fichier du même nom, build.gradle: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;com.android.tools.build:gradle:0.5.+&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Il est assez simple comme fichier. La raison de cette simplicité est que la tendance est à avoir une convention de base dans la façon de construire un apk. Ce que l’on rajoute dans le fichier de configuration ce sont les informations qui font que le projet est spécifique. À savoir, les dépendances, l’emplacement de certains dossiers sources, etc. 
Ici, une dépendance au plugin android pour gradle en version 0.5 au moins. &lt;/p&gt;

&lt;p&gt;Autre détail, les fichiers build et settings de nos modules héritent des paramètres de deux de la racine. Donc on aura pas besoin de déclarer à nouveau une dépendance vers gradle 0.5. On comprend que c’est le lieux pour toutes configurations applicables à l’ensemble du projet. C’est le cas des paramétres comme le minSdk, le buildToolsVersion, etc. Ces informations sont souvent source de &amp;quot;fail&amp;quot; lors d’un build. &lt;/p&gt;

&lt;p&gt;On a donc:  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;com.android.tools.build:gradle:0.5.+&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildToolsVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;18.0.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;minSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;targetSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Passons aux dépendances du module ActionBarSherlock. Il a besoin de la librairie android support-v4. Il y a deux façons de procéder: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;soit on met le fichier jar dans le dossier libs et on rajoute ceci dans son build.gradle: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;   &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;libs&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;include:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.jar&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;soit on utilise la pleine puissance de maven pour qu’il nous gére nos dépendances sans qu’on n’ait à se préoccuper des fichiers jars. Dans ce cas il suffira de rajouter ces quelques lignes: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;   &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;com.android.support:support-v4:18.0.0&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ainsi, on peut se débarrasser du dossier libs. gradle se chargera d’aller chercher le bon fichier jar et de l’inclure au classpath de notre projet.&lt;/p&gt;

&lt;p&gt;Pour en savoir un peu plus sur maven, je vous recommande de lire cette série d’articles.
Il ne faudra pas oublier de remplacer ceci: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;buildToolsVersion&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;18.0.1&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;par:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compileSdkVersion&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buildToolsVersion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildToolsVersion&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;dans tous les modules du projet.
Pour rappel, on avait dit que certains paramètres devront être les mêmes pour tous les modules du projet par souci de cohérence. &lt;/p&gt;

&lt;p&gt;Petite info que j’ai sauté, pour faire la diferrence entre une librairie et un module, il suffit d’appliquer le plugin qu’il faut. Donc pour ActionBarSherlock on aura
&lt;code&gt;apply plugin: ‘android-library’&lt;/code&gt; et pour le module KillerApp &lt;code&gt;apply plugin: ‘android’&lt;/code&gt; dans le fichier build.gradle. &amp;quot;android-library&amp;quot; génére un aar(Android Archive) alors que &amp;quot;android&amp;quot; génére un APK. &lt;/p&gt;

&lt;p&gt;Le module PullToRefresh n’a besoin d’aucune dépendance spécifique donc on peut s’attaquer au module KillerApp. Voici ce qu’on rajoutera&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenLocal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;com.android.support:support-v4:18.0.0&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;libs&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;include:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;*.jar&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;:ABS&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;:pull_to_refresh&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On lui spécifie qu’il aura besoin du support-v4 et des librairies ABS et pull&lt;em&gt;to&lt;/em&gt;refresh présentes à la racine.
On y est! Tout a été configuré, maintenant il suffit de faire un  build pour voir que tout compile comme il faut! &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/08/capture-du-2013-08-11-204553.png&quot; alt=&quot;AS&quot;&gt;&lt;/p&gt;

&lt;p&gt;Nous venons de voir qu’il n’est pas très compliqué de passer de Éclipse à Android Studio. Il suffit juste d’avoir des connaissances sur gradle, maven et de se familiariser un peu avec l’IDE. &lt;/p&gt;

&lt;p&gt;Vu que l’article n’avait pas pour objectif de vous donner ces bases, je vous recommande fortement d’aller lire en entier cette &lt;a href=&quot;http://blog.stylingandroid.com/archives/1872&quot;&gt;série d’articles&lt;/a&gt; sur gradle(7 en tout) et aussi de lire la &lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/user-guide&quot;&gt;documentation&lt;/a&gt; fournie par google(pour une utilisation avancée). 
Avec cela vous pourrez avoir un usage professionnel de ces outils assez puissants :D.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Les librairies Android:ne pas réinventer la roue.</title>
   <link href="http://soulesidibe.github.com/2013/06/09/Les-librairies-Android-ne-pas-r%C3%A9inventer-la-roue/"/>
   <updated>2013-06-09T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2013/06/09/Les-librairies-Android-ne-pas-réinventer-la-roue</id>
   <content type="html">&lt;p&gt;Quand on développe pour une plateforme donnée, si on est novice ou pas assez informé, 
on a tendance à perdre du temps à implémenter des fonctionnalités qui, avec un peu de recherche 
sur la toile, nous aurait permis d’aller plus vite dans notre développement tout en ayant 
du code propre et maintenable. 
Le développement avec Android ne déroge pas à la règle. On trouvera une quantité inestimable 
de ressources sur des sites, forums et blogs qui nous facilite ou disons nous permette d’aller 
plus vite dans notre dév ou d’être plus focused sur le coeur même de l’application. &lt;/p&gt;

&lt;p&gt;Comme on peut le comprendre en lisant le titre de l’article, il s’agira ici d’essayer d’énumérer des 
librairies android qui nous font gagner en temps et en qualité pour notre application! Des librairies 
qui améliorent l’expériences utilisateurs tout en suivant les bonnes pratiques de la team Android de Google.&lt;/p&gt;

&lt;h2&gt;Pull To Refresh&lt;/h2&gt;

&lt;p&gt;Dans une application Android, il est presque impossible de ne pas trouver de liste d’éléments 
(contacts, tweets, sms ou autres informations). Et en général les éléments de cette liste ne sont 
pas statiques. D’où la nécessite de proposer un mécanisme de mise à jour des données assez simple et 
intuitif: le PullToRefresh! &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.github.com/chrisbanes/Android-PullToRefresh/master/header_graphic.png&quot; alt=&quot;PullToRefresh&quot;&gt;&lt;/p&gt;

&lt;p&gt;on le voit sur l’image, d’un simple tiret vers le bas de la liste puis d’un relachement, on a la possibilité 
de mettre à jour les données! On peut imaginer appeler un service sur un autre thread pour récupérer les mises 
à jours. Une belle librairie open source qui permet de mettre en place un système de rafraîchissement que l’on 
retrouve dans presque toutes les apps connues. &lt;/p&gt;

&lt;h2&gt;Action Bar Sherlock&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/05/actionbar.png&quot; alt=&quot;ActionBarSherlock&quot;&gt;&lt;/p&gt;

&lt;p&gt;La prise en compte des tablettes à partir des version 3.0 d’Android est venu avec son lot de nouveautés dont 
la action bar qui a rendu obseléte le bouton menu de nos anciens smartphones. 
Le problème qui se pose c’est que pour utiliser cette bar d’action dans nos apps on est obligé d’avoir 
comme minSdk l’api 11 dans notre manifest android! Ce qu’on ne peut pas faire pour cause une bonne partie 
des devices sur android est en dessous de l’api 11! 
La solution à cela est d’utiliser la librairie ActionBarSherlock qui va nous permettre d’avoir notre bar d’action 
quelle que soit la version d’android (au minimum api 7). Et ainsi offrir la même expérience utilisateur sans tenir 
compte de la version d’android de l’utilisateur. &lt;/p&gt;

&lt;h2&gt;Holo Everywhere&lt;/h2&gt;

&lt;p&gt;En suivant l’actualité autour de la sortie de la version 4 d’android, on n’a pas pu échapé au mot &amp;quot;Holo&amp;quot;. 
C’est quoi Holo? 
C’est tout simplement le nom donnée au thème qui est apparu avec ICS et surtout il a permis de rendre Android 
beaucoup plus beau si on le compare un peu à IOS. Bon revenons au développeur qui veux faire une app qui le 
rendra riche! Bah le truc qui coince ici c’est la même application n’a pas le même rendu quand on la lance 
sur du Android 2.3.x ou sur du 4.2.x. Les composants ne sont pas les mêmes, la police de caractères change 
et bien d’autres aspects visuels changent. 
Vous l’avez compris, la librairie android Holo Everywhere, comme son nom l’indique va nous permettre d’avoir 
le thème holo partout; les devices avec ICS inclus! &lt;/p&gt;

&lt;h2&gt;Sliding Menu&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://soulesidibe.files.wordpress.com/2013/05/4png.png&quot; alt=&quot;SlidingMenu&quot;&gt;&lt;/p&gt;

&lt;p&gt;Si vous avez un android phone(normalement oui en tant que développeur android), vous avez du remarqué une 
nouvelle tendance dans les interfaces. En effet, certaines fonctions de l’application ne sont plus présentent 
sur la bar d’actions(qui sert le plus souvent pour partager du contenu sur les réseaux sociaux ou de menu 
contextuel quand on fait un long press sur un élément d’une liste par exemple) mais sur un autre menu caché à 
droite(et/ou à gauche) de l’écran et qui est rendu visible en faisant un &amp;quot;slid&amp;quot; des bordures de l’écran vers 
l’écran lui même. ICI une app de démo. On retrouve cette façon de faire dans la plus part des apps stars du 
playstore comme Google+, Evernote, The Verge, etc. 
Une très belle libraire qui permet d’avoir accès à certaines fonctionnalités de nos apps de façon très simple. &lt;/p&gt;

&lt;h2&gt;Et beaucoup d’autres!&lt;/h2&gt;

&lt;p&gt;La liste de librairies présentées est loin d’être exhaustive! Il y en a beaucoup d’autres à découvrir, 
tester et pourquoi pas utiliser dans nos apps. Un petit tour vers ce site, TheUltimateAndroidLibrary, 
nous permet de voir qu’il y a des dév qui ont déjà réglé certains soucis donc il ne faut pas se gêner!&lt;br&gt;
C’est le monde merveilleux d’android. Plein de librairies open source qui ne demandent qu’à être utilisées, 
forkées et améliorées. &lt;/p&gt;

&lt;h2&gt;Bonus&lt;/h2&gt;

&lt;p&gt;Pour pouvoir utiliser ces librairies il faut les télécharger et les inclure à nos projets(sauf si on utilise 
le plugin maven). Chose pas tout le temps facile avec nos soucis de connexion internet en Afrique, ou Eclipse 
(avec ca dernière version) qui bug. Au bout d’un moment, on risque d’abandonner. 
J’ai la solution qui vous permettra d’avoir la config prête en un clin d’oeil :D 
Android Kick Start est un site qui nous permet de générer un nouveau projet android et de sélectionner en même 
temps des librairies qui seront incluses et configurées comme il le faut. Il suffira tout simple de télécharger 
le projet et de l’importer dans votre ide! Simple non ;-). 
N’ayez pas peur si on vous propose des noms de librairies que vous ne connaissez pas encore. 
J’en parlerai prochainement…&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git:La suite</title>
   <link href="http://soulesidibe.github.com/2012/12/16/Git-La-suite/"/>
   <updated>2012-12-16T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2012/12/16/Git-La-suite</id>
   <content type="html">&lt;p&gt;Dans un précédent article je vous parlais de git et d’une certaine façon de bien démarrer avec cette outil très puissant 
et surtout incontournable en ce moment.Maintenant qu’on arrive à travailler avec git on peut essayer de voir un peu plus 
ce qu’offre la bête. &lt;/p&gt;

&lt;h2&gt;Merge, push, pull&lt;/h2&gt;

&lt;p&gt;Imaginons que vous avez créez une nouvelle branche &amp;quot;newFeature&amp;quot; histoire de tester une nouvelle fonction que vous 
trouvez pertinente. 
Vous codez, vous commitez. Tout marche! vous venez de mettre en place une fonctionnalité qui va vous valoir 
une prime! Bah il ne reste plus qu’à faire un push! 
Oops non mais attend je suis sur une autre branche; ai-je le droit de faire qu’en même le push? 
Heuu oui et non. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Non du fait que, au niveau du dépôt distant, il n’y a pas de banche &amp;quot;&lt;em&gt;newFeature&lt;/em&gt;&amp;quot;. Donc si on fait un &lt;code&gt;git push origin master&lt;/code&gt; 
on aura comme message &amp;quot;Everything up-to-date&amp;quot;. Ce qui est normal si on comprend un peu comment marche les branches. 
On demande à git de mettre à jour le dépôt distant identifié par &amp;quot;origin&amp;quot; avec nos modifications locales de la 
branche master(&lt;code&gt;git push origin master&lt;/code&gt;). Alors que nos modifications ont été faites sur la branche &amp;quot;newFeature&amp;quot;. 
Pour y remédier: il faut informer la branche master qu’il s’est passé des trucs et qu’elle doit se mettre au parfum: on merge! 
C’est très simple à faire: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git co master
git merge newFeature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;D’abord on se positionne sur la branche master (co= checkout, je ferai un article sur les raccourcis git et comment en rajouter) 
puis on fait un merge en donnant en paramètre le nom de la branche que l’on doit merger (l’auto-complétion marche pour les branches). 
Si on est seul à travailler sur ce dépôt local tout devrait bien se passer. Mais si ce n’est pas le cas et que un autre 
développeur a modifié un des fichiers sur lesquels vous avez apporté des modifications, il peut y avoir des conflits! 
Pour rappel, git ne gère pas les fichiers mais le contenu des fichiers. Donc en cas de conflit, git vous guidera à régler le conflit. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oui Dans le cas où newFeature est une branche de suivi.Une branche de suivi est une branche locale liée à une branche 
située au niveau du serveur. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour récupérer une branche distante: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git co --track origin/newFeature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;La on aura une nouvelle branche newFeature et on sera en même temps connecter deçu. 
Avant de pousser sur la branche distante il faut toujours récupérer les derniers changements au cas où il y en a; 
puis faire son push:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git pull
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lors du pull, il est possible que git vous sort votre éditeur par défaut(vim, gedit, ou autre). C’est dans le cas où la branche 
de suivi et la branche distante diverge(en plus simple, ne sont plus identiques). Donc git fait un merge des deux. 
Il est malin ce git! &lt;/p&gt;

&lt;p&gt;Mais au fait comment on crée une nouvelle branche sur le dépôt distant? 
Il suffit de pousser la branche! &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git branch nouvelleBranche
git push origin nouvelleBranche
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;De même si on veut en supprimer une:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git push origin :nouvelleBranche
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Le &amp;quot;:&amp;quot; suffit pour supprimer la branche distante! Mais elle sera toujours présente en local.&lt;/p&gt;

&lt;h2&gt;Git Stash&lt;/h2&gt;

&lt;p&gt;Il arrive qu’on soit entrain de coder un truc dans une branche et que à un moment on ait besoin de changer de branche 
pour corriger un bug ou un truc du genre. Vu que git n’aime pas quand on essaye de faire un checkout alors que la branche 
actuelle a subit des modifications et que on ne veux pas commiter du code non fini, la solution ici est de dire à git de 
garder les modifications dans un coin et qu’on reviendra continuer notre travail plus tard: &lt;code&gt;git stash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Si on fait un &lt;code&gt;git status&lt;/code&gt;, on remarque que le répertoire de travail est propre! les modifications ont été mises à l’écart. 
Et si à un moment on souhaite revenir sur notre sauvegarde: &lt;code&gt;git stash apply&lt;/code&gt; ou &lt;code&gt;git stash pop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Et la on se rend compte que tout est revenu comme on l’avait laissé! C’est génial. 
La différence entre git stash pop et git stash apply est que avec pop, le stash est appliqué et supprimé mais 
avec apply il est juste appliqué; donc on peut toujours le retrouver et l’appliquer à nouveau. 
Au passage pour supprimer un stash, &lt;code&gt;git stash drop [nomStash]&lt;/code&gt;. 
Pour éviter de faire un &lt;code&gt;git add&lt;/code&gt; apres un git stash apply, rajoutez &lt;code&gt;–index&lt;/code&gt; à la fin: &lt;code&gt;git stash apply --index&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Il est possible qu’on est mis, de la même manière, en quarantaine d’autres modifications. 
Pour voir la liste des stashs, il suffit de faire &lt;code&gt;git stash list&lt;/code&gt;. Et git nous affiche des lignes de ce genre: 
&lt;code&gt;stash@{0}: WIP on master: 25af4b3 autre commit&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Et là, on a le nom du stash (&lt;em&gt;stash@{0}&lt;/em&gt;), le nom de la branche(ici &lt;em&gt;master&lt;/em&gt;) et des informations sur le commit qui 
précède ce stash (&lt;em&gt;25af4b3&lt;/em&gt; autre commit). 
Avec le nom du stash, on peut appliquer un stash spécifique en faisant &lt;code&gt;git stash apply [nomStash]&lt;/code&gt;. 
Si on ne met pas de nom, le dernier stash sera utilisé. 
Et un petit dernier, Si un stash devient important et que vous sentez que c’est plus qu’une petite modification, 
vous pouvez la transformer en une branche! 
&lt;code&gt;git stash branch nomBranche nomStash&lt;/code&gt; 
Et git vous connecte automatiquement à cette nouvelle branche! 
Git stash est une commande très puissante avec laquelle on peut faire énormément de choses. 
Je vous conseille d’aller lire le man (man git-stash ou git help stash)  pour voir les autres possibilités. 
D’ailleurs, je vous conseille d’aller consulter le man pour toutes les autres fonctionnalités de git. On y rencontre 
des astuces qu’on ne voit pas souvent dans les tutos. &lt;/p&gt;

&lt;p&gt;Vous le savez git est vraiment puissant. Il permet de ne plus perdre des heures à chercher des fichiers ou des dossiers. 
Et ainsi se concentrer sur l’essentiel! 
Mais git peut aussi être fun. J’entends par là, personnaliser les commandes, la coloration de git et bien d’autres 
qui feront l’objet d’un article! :D &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android:Consommer un web service</title>
   <link href="http://soulesidibe.github.com/2012/12/08/Android-Consommer-un-web-service/"/>
   <updated>2012-12-08T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2012/12/08/Android-Consommer-un-web-service</id>
   <content type="html">&lt;p&gt;Je vais vous parler de comment se fait la consommation de web services dans une application android. 
Pourquoi android? Deux raisons me pousse à parler des services sous cette plateforme mobile: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La presque totalité des jeunes étudiants fraîchement sortis de nos écoles d’informatique a eu à suivre un 
programme sur le développement avec le langage java (le langage de choix des profs pour appliquer les 
concepts de l’orienté objet). Et c’est se même langage qui est utilisé pour le développement sous android. &lt;/li&gt;
&lt;li&gt;Parmi les plateformes mobiles à la mode, android offre une accessibilité &amp;quot;bon marché&amp;quot;: 12.OOOFCFA ($25) 
pour avoir un compte développeur à vie, et les outils de développement sont accessible sur tous les systèmes 
d’exploitation et gratuitement. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Avant de rentrer dans le vif du sujet, il est bon se mettre dans un contexte où utiliser des web 
services devient essentiel! Imaginons que vous avez développer une application (desktop, web ou autre) 
qui a fait le buzz! Et tout vas pour le mieux :-). Mais à un moment donné, vous vous rendez compte que votre 
application devrait pouvoir être utilisé pas que quand on est devant un PC. Et là vous commencez à penser à 
une application mobile sur les différentes plateforme star à savoir Android, IOS et Windows phone.&lt;/p&gt;

&lt;p&gt;Un autre problème se pose. Comment allez vous faire pour mettre toute la logique de votre killer app dans 
un smartphone! déjà qu’il faudra une version par système d’exploitation, si on doit porter toute la logique 
sur chaque langage de programmation(java, objective-C, C#), bonjour la galère! &lt;/p&gt;

&lt;p&gt;Vous l’avez devenez! La solution c’est de garder la logique métier côté serveur et que chaque client
(mobile, web, desktop) fasse des appels quand il a besoin d’une ressource spécifique. Les web services REST 
sont une très bonne alternative pour mettre en place ce genre de technique.  Pas besoin d’une implémentation 
par langage; tous les clients utiliseront le protocole http pour communiquer avec les serveurs. Ce qui simplifie 
grandement les échanges entres les différentes entités. &lt;/p&gt;

&lt;p&gt;(La gestion des exceptions et certaines initialisations de variable ont été volontairement omises.) &lt;/p&gt;

&lt;h2&gt;Faire un appel&lt;/h2&gt;

&lt;p&gt;Pour faire un appel vu que REST est orienté web, on va utiliser les classes du package java.net. On crée un objet 
de type URL qui va contenir l’adresse de la ressource ou tout simplement le lien du service: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://chemin/vers/service&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On ouvre une connexion&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;URLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Récupération du code de retour. Vu qu’on est en HTTP. Si tout c’est bien passé on doit recevoir le code 200 (ici HttpURLConnection.HTTP_OK) et enfin récupérer notre flux:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HTTP_OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A ce stade nous avons un objet de type InputStream qui contient les informations que le serveur a renvoyé.&lt;/p&gt;

&lt;h2&gt;Parser du xml avec XMLPullParser&lt;/h2&gt;

&lt;p&gt;Apres la récupération des données il faut bien les lires. 
Pour cela il faudra utiliser un parseur en fonction de la techno utiliser pour envoyer les données côté serveur. 
Dans le cas du xml, il existe un parseur natif intégrer à Android: XMLPullParser. C’est un parseur bas niveau; 
c’est a dire qu’il faudra parcourir tout le document xml, tag par tag et faire des traitements en fonction du tag 
rencontré. Voici un exemple de xml que l’on peut recevoir: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;personnes&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;personne&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;genre=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;feminin&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nom&amp;gt;&lt;/span&gt;Diallo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nom&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;prenom&amp;gt;&lt;/span&gt;Binta&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prenom&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;age&amp;gt;&lt;/span&gt;15&lt;span class=&quot;nt&quot;&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/personne&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;personne&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;genre=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;masculin&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;nom&amp;gt;&lt;/span&gt;Ndiaye&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nom&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;prenom&amp;gt;&lt;/span&gt;Alioune&lt;span class=&quot;nt&quot;&gt;&amp;lt;/prenom&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;age&amp;gt;&lt;/span&gt;25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/age&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/personne&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/personnes&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;On aura besoin d’un objet String pour contenir la valeur d’un tag à chaque passage., un objet qui va nous 
fournir un parseur qui aura les paramètres indiqués( ici le support des espaces de noms, voir doc de &lt;strong&gt;XmlPullParserFactory&lt;/strong&gt;), 
Et enfin générer notre parseur et lui spécifier l’objet InputStream avec lequel il devra travailler: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;XmlPullParserFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlPullParserFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setNamespaceAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;XmlPullParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newPullParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Voici un morceau de code tiré de la doc officiel qu’on peut utiliser pour extraire les informations du InputStream: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Le type d&amp;#39;evenement pour savoir si on est au debut du xml et bien &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//d&amp;#39;autres informations&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEventType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Tant qu&amp;#39;on n&amp;#39;est pas à la fin du document&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlPullParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;END_DOCUMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//Si on est au debut d&amp;#39;un tag&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlPullParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;START_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;personne&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;genre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttributeValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlPullParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;END_TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nom&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;nom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlPullParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;//recuperation de la valeur pour le tag actuel&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xpp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Une petite astuce que vous avez surement remarqué, en début de tag on récupére les attributs du tag, en fin de 
tag on récupère la valeur pour ce tag. 
Un exemple concret sur ce parseur sur &lt;a href=&quot;https://github.com/soulesidibe/xmlPullParserExemple&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;Manipuler du json&lt;/h2&gt;

&lt;p&gt;Pour traiter du json reçu via un web service, Android embarque en natif un package constituer de classe 
pour faire le job: &lt;strong&gt;org.json.&lt;/strong&gt;* .Elles sont très simples d’utilisation. Voyons ce cas pratique de json: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;quot;personnes&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;nom&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Fama&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;prenom&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Mbaye&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;19&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;feminin&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;nom&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;prenom&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Anthoine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;30&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;masculin&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Le code pour récupérer les informations ci-dessus: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Convertir le InputStream de départ en String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferedReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stringBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uneLigneLue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uneLigneLue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//on ajoute la nouvelle ligne lue dans le StringBuilder&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;stringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UneLigneLue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//lecture de la ligne suivante&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ligneLue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//notre Objet maguique&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JSONArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;personnes&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getJSONObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nom&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Un cas concret de manipulation du json sur &lt;a href=&quot;https://github.com/soulesidibe/JsonParserExemple&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Cette facon de faire est pratique pour des fichiers aussi simple que celui utilisé mais il est mieux dans 
certains cas d’opter pour des librairies qui ajoutent un niveau d’abstraction dans un souci de simplifier 
la manipulation du json. C’est le cas de la librairie &lt;strong&gt;GSON&lt;/strong&gt; qui permet de faire le passage du JSON en &lt;strong&gt;POJO&lt;/strong&gt; 
et vice versa.  Il y a aussi la librairie &lt;strong&gt;JACKSON&lt;/strong&gt; tout aussi puissante. 
Il faut juste choisir celle qui nous rend efficace. &lt;/p&gt;

&lt;h2&gt;Oui mais pourquoi faire?&lt;/h2&gt;

&lt;p&gt;Apres avoir reçu les données du serveur, après avoir convertir le xml/json en objet java, en tant que 
dévelopeur java, il n’y a pas vraiment de limite! 
Dans le contexte d’un développement android, il y a plusieurs manières d’utiliser ces données: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mettre à jour une liste: exemple une vue qui affiche la timeline d’un compte twitter a besoin de récupérer 
les informations des serveurs de twitter pour les exposer à l’utilisateur via une ListView ou une ListActivity;&lt;/li&gt;
&lt;li&gt;Renseigner une base de données (sqlite) pour une utilisation de l’application en offline &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les possibilités n’ont pas de limite. Ça dépendra de ce que l’application fait et de comment 
le développeur veut le faire.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Prise en main rapide de git</title>
   <link href="http://soulesidibe.github.com/2012/12/04/Prise-en-main-rapide-git/"/>
   <updated>2012-12-04T00:00:00+00:00</updated>
   <id>http://soulesidibe.github.com/2012/12/04/Prise-en-main-rapide-git</id>
   <content type="html">&lt;p&gt;Lorsqu’on développe une application, en entreprise comme en solo, il est conseillé ou même essentiel 
d’avoir de bonnes pratiques. L’une d’elle est l’utilisation d’un gestionnaire de version pour avoir 
une certaine traçabilité de nos changements. Donc ici, on parla plus particulièrement de git qui est très célèbre 
dans le monde le l’open source avec des implémentations en ligne comme &lt;strong&gt;github&lt;/strong&gt;, &lt;strong&gt;bitbucket&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;C’est quoi un gestionnaire de version&lt;/h2&gt;

&lt;p&gt;Ce n’est pas bien compliquer; c’est juste un logiciel qui va te permettre d’avoir l’historique de toutes 
les modifications que tu as eu à apporter dans ton code ou tout simplement à un document. Et surtout de pouvoir 
retourner sur une version antérieur d’un document sans grande difficulté. &lt;/p&gt;

&lt;p&gt;Très sympa comme concept! 
Imagines ton boss te dit: &amp;quot;Demain on doit présenter la version stable du produit à un nouveau client&amp;quot;. 
Alors que entre temps, tu étais en pleine modification du code et donc qu’il sera presque impossible de revenir 
à cette version stable vu que dés le départ tu n’as pas utiliser un système de versionning ou, comme 
certains le font, tu n’as pas créer un dossier &lt;strong&gt;produitStableBackup&lt;/strong&gt;!
Donc on voit clairement, que ce système peut nous éviter bien des soucis :-). 
Il existe principalement deux modes de gestion de version:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Le mode centralisé ou client-serveur: dans ce mode, le code source est sur un serveur. 
Tous les développeurs interagissent avec ce serveur soit pour récupérer les dernières mise à jour, 
soit pour apporter une nouvelle mise à jour. On comprendra qu’il est impératif d’être connecté au réseau local 
ou à internet pour que cette interaction puisse se faire. Exemple:Subversion(svn), cvs pour Concurrent versions system. &lt;/li&gt;
&lt;li&gt;Le mode décentralisé: ici on peut dire que tout le monde est client et serveur. 
Et on a la possibilité d’interagir avec toute l’équipe sans passer par un point central. Tu peux donc 
travailler en n’étant pas connecté et faire des mises à jour en local; puis rendre ces mises à jour disponible 
dès qu’elles sont prêtes. Cependant même dans ce mode, il existera un point qui jouera uniquement le rôle de 
serveur mais ne sera pas indispensable pour travailler. Exemple: git, mercurial, bazaar. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous l’avez compris, il s’agira ici de parler de git!&lt;/p&gt;

&lt;h2&gt;Get started here&lt;/h2&gt;

&lt;p&gt;Il faudrait déja installer la bête. Rien de plus simple: &lt;code&gt;sudo apt-get install git-core&lt;/code&gt; ou 
&lt;code&gt;sudo yum install git-core&lt;/code&gt; et on peut enfin s’amuser ;-). &lt;/p&gt;

&lt;p&gt;Bon avant de s’amuser il faut d’abord se présenter(c’est le minimum non?): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comment tu t’appelles? &lt;code&gt;git config –global user.name &amp;quot;Souleymane Sidibe&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ton mail pour te joindre stp: &lt;code&gt;git config –global user.mail &amp;quot;souley@sidi.be&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il faut bien qu’on puisse savoir qui a fait tel modification ou comment le joindre. &lt;/p&gt;

&lt;p&gt;Maintenant que tout est prêt, il nous manque une chose. Un dépôt git. 
S’il existe déjà, il faut le récupérer; on parle de cloner un dépot. Et c’est assez facile à faire: 
&lt;code&gt;git clone http://chemin/vers/depot/killerApp.git [LeNomDuDepotEnLocal]&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Si on ne met pas le nom, git va créer un dossier &amp;quot;killerApp&amp;quot;. 
Petite précision, en plus du protocole http, il est possible d’avoir accès à un dépôt git via le protocole ssh 
(étant plus sécurisé), le protocole git ou avec un bête chemin du genre &lt;code&gt;/home/lead/projects/killerApp.git&lt;/code&gt;.&lt;br&gt;
Si le dépôt n’existe pas en l’initialise.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; 
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /chemin/vers/code/source
git init &lt;span class=&quot;c&quot;&gt;#pour initialiser un nouveau dépôt.&lt;/span&gt;
git add fichier.java &lt;span class=&quot;c&quot;&gt;#pour dire à git de suivre le fichier fichier.java&lt;/span&gt;
git add . &lt;span class=&quot;c&quot;&gt;#si on veut ajouter tous les fichiers du nouveau dépôt (même ceux des sous dossiers).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;Il y a souvent des fichiers qui ne doivent pas être suivis. c’est le cas des fichiers .class, certains 
fichiers de configuration. Pour ne pas que le système nous répéte après chaque &lt;code&gt;git st&lt;/code&gt;(statut) 
qu’il y a des fichiers non suivis, il faut juste ajouter un fichier .gitignore et y mettre les noms 
des fichiers et dossiers correspondants. Gitignore comprend aussi les caractères spéciaux 
comme *.class (tous les fichiers .class).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/github/gitignore&quot;&gt;Ici&lt;/a&gt; un ensemble de prototypes de fichier .gitignore en fonction du langage ou de l’IDE. À personnaliser of course.
Une commande que j’utilise beaucoup et qui permet de voir l’état du dépôt: &lt;code&gt;git status&lt;/code&gt;.
Elle permet d’avoir une vision global et fourni des informations sur la branche actuelle, les fichiers qui on été modifiés, 
les fichiers présents dans le dépôt et qui ne sont pas suivis. À propos des fichiers, on peut compter quatre statuts possibles: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;untracked&lt;/strong&gt; = &amp;gt;le fichier n’est pas suivi, faire un git add pour qu’il le soit &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unmodified&lt;/strong&gt; =&amp;gt; le fichier n’est pas modifié; git rm pour retourner à l’état untracked &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modified&lt;/strong&gt; =&amp;gt; le fichier a été modifié; il s’agit d’un fichier unmodified qui a été édité &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;staged&lt;/strong&gt; =&amp;gt; le fichier est indexés, donc il fera parti du prochain commit et retournera à l’état unmodified. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un défaut/qualité de git, s’est le grand nombre de commandes et d’options disponibles. Mais on est aidé par 
la complétion des commandes et aussi par la commande git help qui explique un peu ce qu’on peut faire et 
&lt;code&gt;git help &amp;lt;option&amp;gt;&lt;/code&gt; pour avoir un man complet de la commande en question. &lt;/p&gt;

&lt;p&gt;Apres avoir implémenter la fonction qui va te rendre riche, il faut la &amp;quot;committer&amp;quot;. En terme technique, 
c’est le fait de faire passer les fichiers qui étaient &amp;quot;staged&amp;quot; en unmodified. En plus simple, c’est juste 
le fait d’ajouter une entrée dans l’historique des modifications du dépôt. En général, il est accompagné 
d’un commentaire pour expliquer ce qui a été ajouter, modifier, supprimer: &lt;code&gt;git commit -m &amp;quot;commentaires&amp;quot;&lt;/code&gt;.
On peut aussi faire en une seule fois un git add et un git commit: &lt;code&gt;git commit -a -m &amp;quot;coms&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;L’utilisation des branches&lt;/h2&gt;

&lt;p&gt;Retournons voir le développeur qui voulait modifier son code tout en ayant une version stable utilisable à tout moment.
Il a le choix entre plusieurs possibilités: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Créer un dossier avec des noms bizarres que lui seul peut comprendre (project&lt;em&gt;old&lt;/em&gt;bon&lt;em&gt;2012&lt;/em&gt;02&lt;em&gt;14&lt;/em&gt;back): ici on prend l
e risque de se perdre dans sa forêt de dossiers ou de ne plus savoir lequel a ou n’a pas telle fonctionnalité&lt;/li&gt;
&lt;li&gt;Créer un clone du projet avec un git clone /chemin/project.git: ça peut être une alternative sauf que pour un gros 
projet, le disque dur peut crier!&lt;/li&gt;
&lt;li&gt;Ou créer une branche! git branch new_feature: c’est la meilleur des manières si on veut tester de nouvelles 
fonctionnalités tout en gardant une copie propre du projet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il faut savoir que quand on initialise un projet(&lt;code&gt;git init&lt;/code&gt;) ou qu’on clone un dépôt (&lt;code&gt;git clone&lt;/code&gt;). on est par&lt;br&gt;
défaut sur la branche &amp;quot;master&amp;quot;. 
&lt;code&gt;git branch&lt;/code&gt; permet d’avoir la liste des branches locales 
&lt;code&gt;git branch &amp;lt;nom_de_la_nouvelle_branche&amp;gt;&lt;/code&gt;  pour créer une branche; en général je donne le nom de la feature 
que je voudrai implémenter ou la correction d’un bug. 
&lt;code&gt;git branche -d &amp;lt;nom_branche&amp;gt;&lt;/code&gt; supprime la branche. &lt;/p&gt;

&lt;p&gt;Et bien d’autres options que tu peux explorer en faisant &lt;code&gt;git help branch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oui mais bon c’est bien de créer des branches de les supprimer et tout mais comment on fait pour passer 
d’une branche à l’autre?! 
Et bin il suffit de faire git checkout &lt;nom_branch&gt; et on peut se permettre de faire un 
&lt;code&gt;git rm .&lt;/code&gt; (supprimer tout le contenu du dossier) 
&lt;code&gt;git commit -m &amp;quot;tout supprimer!&amp;quot;&lt;/code&gt; sans aucune crainte! 
Sur la branch master c’est comme s’il ne s’était rien passé (&lt;code&gt;git checkout master&lt;/code&gt; pour vérifier). 
C’est cela la magie de git. Et il le fait avec une simplicité. On n’aura plus peur d’apporter de grosses 
modifications à des projets critiques ;-). &lt;/p&gt;

&lt;p&gt;A ce stade, tu dois pouvoir travailler avec git. Tu sais récupérer un dépôt ou en initialiser un, ajouter de
s fichiers, commiter, créer des branches, c’est le minimum à connaitre!
Dans un prochain article, on ira plus en profondeur dans l’utilisation de git.&lt;/p&gt;
</content>
 </entry>
 

</feed>
